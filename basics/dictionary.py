"===============================Словари=============================="
# Словари (dict) - это изменяемый, итерируемый, неупорядоченный, неидексируемый тип данных, предназначенный для хранени данных в парах (ключ:значение)

user = {
    'name' : "Nasty",
    'age' : 13,
    'last_name' : 'Tuz'
    'name' : 'Hello'    #print(user['name']) - мы заменили значение Nasty на Hello   
}

print(user['name'])  #"Nasty" - используем [] - тип как индкексы, ток вместо цифры используме ключи

#  => ключи в словаре будут уникальными, поэтому если в словарь добавить значение по уже существующему ключу, то сохранится последнее значение
dict1 = {'a' : 1, 'b' : 2, "a" : 3}
#{"a" : 3, 'b' : 2}

#ключами могут быть только хешируемые типы данных (неизменяемые тип данных) как строки, цифры, кортежи, None, True, False. Поэтому нельзя использовать списки

dict1 = {'a' : 1, 'b' : 2}
#dict1["d"]    #KeyError: d""
"=========================Создание словарей========================="
#У нас есть 5 способа, чтобы создать словарь
dict1 = {'a' : 1, 'b' : 2, 'c' : 3}
dict2 = dict([('a', 1), ('b', 2)])  #во функцию вводим список,а в список элементы в виде кортежа
#{"a" : 1, "b" : 2}
list1 = ['a','b', 'c']
list2 = [1,2,3]
dict3 = dict(zip(list1,list2))
#{"a" : 1, "b" : 2}

dict4 = {}
dict['name'] = "Nasty"  #т.е с помощью [] можно добавлять ключ, выводить ключ через принт и заменять !!!!!!!!!!!!!!!!!!!!
dict4['last_name'] =  'Tuz'
print(dict4)   #{'name' : 'Nasty'...}

dict(a=1, b=2, c=3)
# возвращает {'a': 1, 'b': 2, 'c': 3}

"===========================Методы словаря==========================="
# get - метод, который принимает в себя кдюч. Если такой ключ есть - возварщает его значение. Если такого ключа нет - возвращает None (или default значение)
user = {
    'name' : "Nasty",
    'age' : 13,
    'last_name' : 'Tuz'
}
#user['id']   # KeyEror: 'id'
user.get('id')  #None - НО ПРИ ЭТОМ ДАЛЬШЕ ПРОГРАММА БУДЕТ РАБОТАТЬ, ТАМ НЕ ПОЯВИТЬСЯ KeyEror
user.get('name')
user.get('id', 10)   # 10  
user.get('age', 20)   #13

# pop - метод, который принимает ключ, удалят пару под этим ключом. возвращает удаленное значение
dict1 = {'a':10, 'b':20, 'c':30}
res = dict1.pop('a')
print(dict1) # {'b':20, 'c':30}
print(res) # 10

# popitem - метод, который удаляет пару, которая была добавлена последней в словарь
dict1 = {'a':10, 'b':20, 'c':30}
res = dict1.popitem()
print(dict1) # {'a':10, 'b':20}
print(res) # ('c', 30)

#update - расширяет словарь вторым словарем
dict1 = {'a' : 1}
dict2 = {"b" : 2}
dict1.update(dict2)
print(dict1)   #{'a' : 1, "b" : 2}
print(dict2)   # {"b" : 2} - потому что ток dict1 расширился

"========================keys, values, items========================"
#keys - метод, который возвращает список ключей
dictionary = {'a': 1, 'b': 2, 'c': 3}
dict_as_list = dictionary.keys()
#values - возвращает список значений
# items - возвращает пару ключей и значений

#ИЗ ГИТА СКОПИРОВАТЬ

"=======================Итерирование словарей======================="
user = {
    'name' : "Nasty",
    'age' : 13,
    'last_name' : 'Tuz'
}

for i in user:   #когда проходимся по словарю - получаем ток ключи 
    peint(i)
# 'name'
# 'age'....

for i in user.keys():  #проходимся по ключам
    print()
# 'name'
# 'age'....

for i in user.values():  #проходимся по значениям
    print()
# 'Nasty'
# '13'....

for i in user.items():  #проходимся по парам
    print()
# ('name', "Nasty")....

for key, value in user.items()

# Задачка  и решение
dict1 = {'a' : 1, 'b' : 2, 'c' : 3} 
res = {}
for key, value in dict1.items():
    res[value] = key
print(res)
