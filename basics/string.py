"===============================Строки==============================="
#строки - неизменяемый тип даннх, предназначенный для хранения текста (последовательности символов)

string1 = 'строка в одинарных кавычках'
string2 = "строка в двойных кавычках"
string3 = "Don't"
string4 = 'Study in "Makers"'
string5 = ''' Многострочный 
текст
тут можно использовать любые кавычки
'''

string7 = 'hello' + ' ' + 'world' #'hello world'
string8 = 'hello' * 3 #'hellohellohello'

"=========================Экранизация строк========================="
Экранировать символы, то есть менять управляющие символы на так называемые управляющие последовательности, известные также, как escape-последовательности. Ниже приведен список действующих escape-последовательностей Питона для использования в строках.

Все данные символы экранирования используются ТОЛЬКО со строками

Особенности экранирования:
- символы escape-последовательности могут быть представлены и отдельно(print("hello" + "\n" + 'world'))
- также эти символы могут быть внедрены в текст: print('hello\nworld')

'\n' #перенос на новую строку (new line)
'\t' #отступ (табуляция)
print('\\') #чтобы отразить \, необходимо его продублировать или сделать пробел
'\'' #отображение '
"\"" #отображение "
'\r' #перенос каретки  на начала строки
print('1234567\rhello')
'\v' #перенос на новую строку со смещением вправо на длину предыдущей строки
print('hello\vworld\v')

"==============================Индексы=============================="
# индекс - это порядковый номер символа в строке (начиная с 0)
'h e l l o'
#0 1 2 3 4
string = 'hello world'
print(string[0]) #напечатается "h"
index = len(string) -1
print(string[index])   #первый способ вывести букву "d"
print(string[-1])      #второй способ вывести букву "d". он более простой
string[5] #' '

#срез - часть строки
print(string[6:9]) #'wor' (6,7,8) - букву l срезал, тк он 9 буква
string[:6] #"hello "
string[7:] #"orld "
string[:] #hello world
string[0:11:2] #с 0 до 11 индексы букв, но при этом выводим каждый 2 элемент
string

"========================Форматирование строк========================"
#форматирование (f) - это изменение внешнего вида документа и его отдельных частей
#форматирование представляет собой смесь строк и отсылок к переменным через символ {}
#  он нужен, чтобы код был динамичным и чтобы не было необходимости все время менять какие то данные 
title = 'пирог'
price = 35
string = f'Название: {title}, цена: {price}' #используем {}, чтобы сделать отсылку к переменной
#Название: пирог, цена: 35

Есть другие способы форматирования, они более устаревшие, но необходимо их знать, чтобы разбираться в чужих старых кодах:
format1 = "Название: %s, цена: %s" #s - сокращенно от стринг
print(format1 % ("Яблоко", 80))
#Название: яблоко, цена: 80

format2 = "Название: {}, цена: {}"
print(format2.format("Груша", 60))


"===========================Методы строк==========================="
#метод - это функция, которая принадлежит определенному типу данных, обращаемся к ней через точку
print(dir(str))   #dir - показывает все возможные методы с данным типом данных, в нашем случае и это строки

hello.upper()  #"HELLO"
'HELLO'.lower() 
'hello WORLD'.swapcase()  #"HELLO world"
"hello world".title() #"Hello World"
"hello world".capitalize() #"Hello world"

'hello'.center(11)   #'   hello   ' #ставит слово в центр строки. 11 всего символов. 3 справа пробелов, 3 слева пробелов, 5 символов их слово hello
'hello'.count('l') #2
'hello'.count('ll') #1
'Hello'.count('hello') #0
'hello'.count('') #6 - пустые строки между символами

'hello world'.split() #['hello', 'world'] - разединяет словосочетание на отдельные слова
'hello world'.split('o') #['hell', ' w', 'rld] - разделяем по букве "о"
' '.join(['hello', 'world']) #hello world   - обединяет слово каким то символом, в нашем случаае это пробел
%.join(['hello', 'world']) #hello%world

'hello world'.find('w')   #6
'hello world'.find('wor')   #6  - по первому символу ищет слово (символ)
'hello world'.find('o') #4 - по первой "о"
'hello world'.rfind('o') #7 - 'r' - от слова right - поэтому мы будем искать справа перую "o"