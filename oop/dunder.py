# Dunder (double underscore) - методы (магические методы), у которых 2 "_" в начале и в конце

# Магия в том, что мы их не вызываем напрямую

class A:
    def __new__(cls):  #__new__ - метод, который нужен для создания объекта
        print('__NEW__')
        return super().__new__(cls)
    
    def __init__(self):  #__init__ - метод, который для только что созданного объекта создает некие атрибуты объекта, которые мы запишем в функцию init
        print('__INIT__')
        pass

A()   #вызываем класс, и так как мы немного внесли корректировки, то сначала выводится функция __new__ со всем содержимым, а затем выводится функция __init__ со всем содержимым

# __NEW__
# __INIT__

# __new__, __init__ - вызываются при создании объекта

# __eq__ ==
# __ge__ >=
# __gt__ >
# __le__ <=
# __lt__ <
# __ne__ !=
# __add__ +
# __sub__ -
# __floordiv__ /
# __truediv__ //

#__str__ - выводится при использовнии функци str, print
class A:
    pass
print(A())  #<__main__.A object at 0x7f0459557bb0> - тоже строкой тип данных. Мы его получили из отрабатывания функции __str__ взятый из класса object, ведь класс А наследует из класса object (где как раз есть функции __str__)

class A:
    def __str__(self) -> str:   #тут уже перезаписываем нашу функции __str__из класса object, который наш класс А унаследовал
        return 'Hello'
print(A())
#Hello


